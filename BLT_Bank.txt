// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
contract Bank
{
  int bal;

 constructor() 
  {
    bal=1;
  }
  function get_balance() view public returns(int)
  {
      return bal;
  }

  function withdraw(int amt) public
  {
    if(bal < amt)
    {
      bal;
    }
    else 
    {
      bal = bal-amt;
    }
    
  }
  function Deposit (int amt) public 
  {
     bal = bal+amt;
  }
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank
{
    address public owner;
    uint256 public balance;

    constructor() 
    {
        owner = msg.sender;
        balance = 0;
    }

    function deposit(uint256 amount) 
    public {
        require(msg.sender == owner, "Only the owner can deposit money");
        balance += amount;
    }

    function withdraw(uint256 amount) 
    public {
        require(msg.sender == owner, "Only the owner can withdraw money");
        require(amount <= balance, "Insufficient balance");
        balance -= amount;
    }

    function getBalance() public view returns (uint256) {
      return balance;
    }
}
